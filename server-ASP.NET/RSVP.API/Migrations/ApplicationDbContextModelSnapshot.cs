// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RSVP.Infrastructure.Data;

#nullable disable

namespace RSVP.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("RSVP.Core.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("AgreedToTerms")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "agreed_to_terms");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "comments");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "reservation_date");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "reservation_time");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "store_Id");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StoreId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RSVP.Core.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "serviceId");

                    b.Property<string>("StoreId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 30,
                            Name = "Haircut",
                            Price = 30.00m,
                            ServiceId = "service-1",
                            StoreId = "store-1"
                        },
                        new
                        {
                            Id = 2,
                            Duration = 120,
                            Name = "Hair Coloring",
                            Price = 80.00m,
                            ServiceId = "service-2",
                            StoreId = "store-1"
                        });
                });

            modelBuilder.Entity("RSVP.Core.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "storeEmail");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "storeId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "hairsalon@example.com",
                            Location = "Los Angeles",
                            Name = "Hair Salon A",
                            StoreId = "store-1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "hairsalon@example.com",
                            Location = "Texas",
                            Name = "Hair Salon B",
                            StoreId = "store-2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "hairsalon@example.com",
                            Location = "New York",
                            Name = "Hair Salon C",
                            StoreId = "store-3"
                        });
                });

            modelBuilder.Entity("RSVP.Core.Models.StoreHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "storeId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("StoreHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StoreId = "store-1"
                        },
                        new
                        {
                            Id = 2,
                            StoreId = "store-2"
                        },
                        new
                        {
                            Id = 3,
                            StoreId = "store-3"
                        });
                });

            modelBuilder.Entity("RSVP.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fullName");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "lastLoginAt");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Admin")
                        .HasAnnotation("Relational:JsonPropertyName", "role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RSVP.Core.Models.Reservation", b =>
                {
                    b.HasOne("RSVP.Core.Models.Service", "Service")
                        .WithMany("Reservations")
                        .HasForeignKey("ServiceId")
                        .HasPrincipalKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RSVP.Core.Models.Store", "Store")
                        .WithMany("Reservations")
                        .HasForeignKey("StoreId")
                        .HasPrincipalKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RSVP.Core.Models.Service", b =>
                {
                    b.HasOne("RSVP.Core.Models.Store", "Store")
                        .WithMany("Services")
                        .HasForeignKey("StoreId")
                        .HasPrincipalKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RSVP.Core.Models.StoreHour", b =>
                {
                    b.HasOne("RSVP.Core.Models.Store", "Store")
                        .WithOne("StoreHour")
                        .HasForeignKey("RSVP.Core.Models.StoreHour", "StoreId")
                        .HasPrincipalKey("RSVP.Core.Models.Store", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("RSVP.Core.Models.RegularHour", "RegularHours", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<TimeSpan>("Close")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "close");

                            b1.Property<int>("Day")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "day");

                            b1.Property<bool>("IsClosed")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "isClosed");

                            b1.Property<TimeSpan>("Open")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "open");

                            b1.Property<int>("StoreHourId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("StoreHourId", "Day")
                                .IsUnique();

                            b1.ToTable("RegularHour");

                            b1.HasAnnotation("Relational:JsonPropertyName", "regularHours");

                            b1.WithOwner()
                                .HasForeignKey("StoreHourId");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 1,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 2,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 2,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 3,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 3,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 4,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 4,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 5,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 5,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 6,
                                    Close = new TimeSpan(0, 17, 0, 0, 0),
                                    Day = 6,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 10, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 7,
                                    Close = new TimeSpan(0, 0, 0, 0, 0),
                                    Day = 0,
                                    IsClosed = true,
                                    Open = new TimeSpan(0, 0, 0, 0, 0),
                                    StoreHourId = 1
                                },
                                new
                                {
                                    Id = 8,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 1,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 9,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 2,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 10,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 3,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 11,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 4,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 12,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 5,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 13,
                                    Close = new TimeSpan(0, 17, 0, 0, 0),
                                    Day = 6,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 10, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 14,
                                    Close = new TimeSpan(0, 0, 0, 0, 0),
                                    Day = 0,
                                    IsClosed = true,
                                    Open = new TimeSpan(0, 0, 0, 0, 0),
                                    StoreHourId = 2
                                },
                                new
                                {
                                    Id = 15,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 1,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 3
                                },
                                new
                                {
                                    Id = 16,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 2,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 3
                                },
                                new
                                {
                                    Id = 17,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 3,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 3
                                },
                                new
                                {
                                    Id = 18,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 4,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 3
                                },
                                new
                                {
                                    Id = 19,
                                    Close = new TimeSpan(0, 18, 0, 0, 0),
                                    Day = 5,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 9, 0, 0, 0),
                                    StoreHourId = 3
                                },
                                new
                                {
                                    Id = 20,
                                    Close = new TimeSpan(0, 17, 0, 0, 0),
                                    Day = 6,
                                    IsClosed = false,
                                    Open = new TimeSpan(0, 10, 0, 0, 0),
                                    StoreHourId = 3
                                },
                                new
                                {
                                    Id = 21,
                                    Close = new TimeSpan(0, 0, 0, 0, 0),
                                    Day = 0,
                                    IsClosed = true,
                                    Open = new TimeSpan(0, 0, 0, 0, 0),
                                    StoreHourId = 3
                                });
                        });

                    b.OwnsMany("RSVP.Core.Models.SpecialDate", "SpecialDate", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<TimeSpan>("Close")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "close");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "date");

                            b1.Property<bool>("IsClosed")
                                .HasColumnType("INTEGER")
                                .HasAnnotation("Relational:JsonPropertyName", "isClosed");

                            b1.Property<TimeSpan>("Open")
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "open");

                            b1.Property<int>("StoreHourId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("StoreHourId", "Date")
                                .IsUnique();

                            b1.ToTable("SpecialDate");

                            b1.HasAnnotation("Relational:JsonPropertyName", "specialDate");

                            b1.WithOwner()
                                .HasForeignKey("StoreHourId");
                        });

                    b.Navigation("RegularHours");

                    b.Navigation("SpecialDate");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("RSVP.Core.Models.Service", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RSVP.Core.Models.Store", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Services");

                    b.Navigation("StoreHour");
                });
#pragma warning restore 612, 618
        }
    }
}
